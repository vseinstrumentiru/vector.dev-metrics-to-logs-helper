#
# ВНИМАНИЕ! Эти трансформы жестко связаны с настройками метрик в metrics-catalog.{{ vector_environment }}.yml, при их изменении необходимо исправить и тесты
#

###############################################################################

[transforms.metrics-http-accesslog-k8s_exclude_filter]
type = "filter"
inputs = ["http_accesslog-k8s"]
condition = '''

exclude_event = false {%- for selector_conf in metrics_catalog.exclude_events -%}
{{ ' ' }} || # selector_id: selectors/{{loop.index0 }}
((  true {# оборачиваем выражения одного selector #}
    {%- for logfield_name, fconf in selector_conf.filter.items() %}
{# newline #}
{# Тут выполняем выбор оператора сравнения и констуируем выражение -#}
{# DEBUG: {{ logfield_name }}: {{ fconf }} -#}
        {%- if fconf.eq is defined and fconf.eq != "" %}
&& includes([to_string!(.{{ logfield_name }})], "{{ fconf.eq }}")
        {%- endif -%}
        {%- if fconf.neq is defined and fconf.neq != "" %}
&& !includes([to_string!(.{{ logfield_name }})], "{{ fconf.neq }}")
        {%- endif -%}
        {%- if fconf.re is defined %}
            {%- if fconf.re != "" %}
&& match(to_string!(.{{ logfield_name }}), r'{{ fconf.re }}')
            {%- else %}
[transforms.metrics-http-accesslog-k8s_exclude_filter] Build text: ERROR: invalid regexp '{{ fconf.re }}' for {{ namespace }}/{{ metric_name }}, selector: {{ selector_conf.selector }}, filter: re
            {%- endif -%}
        {%- endif -%}
        {%- if fconf.nre is defined %}
            {%- if fconf.nre != "" %}
&& !match(.{{ logfield_name }}, r'{{ fconf.nre }}')
            {%- else %}
Build text: ERROR: invalid regexp '{{ fconf.nre }}' for {{ namespace }}/{{ metric_name }}, selector: {{ selector_conf.selector }}, filter: nre
            {%- endif -%}
        {%- endif -%}
        {%- if fconf.oneOfRe is defined %}
&& match_any!(.{{ logfield_name }}, [
            {%- for one_re in fconf.oneOfRe %}
r'{{ one_re }}',
            {%- endfor %}
])
        {%- endif -%}
    {% endfor %}
{{ ' ' }} ))
{%- endfor %}
{{ ' ' }}
{# newline #}

is_allowed = !exclude_event
is_allowed
'''

# 1) Создаем трансформ с фильтром под каждую метрику (уникальное имя фильтра с общим префиксом)
# 2) Создаем определения метрик под каждую метрику
# 3) Собираем все источники метрик в общий metrics-http-accesslog-k8s


# Проходим по всем namespace и метрикам, создаем условия отбора для событий из input
{%- set _filter_name_prefix = "metrics-http-accesslog-k8s-filter-metric_" %}
{%- for namespace, metric in metrics_catalog.metrics.items() -%}
    {%- for metric_name, metric_conf in metric.items() -%}
        {%- set _metric_full_name = namespace + "_" + metric_name -%}
        {%- set _filter_name = _filter_name_prefix + _metric_full_name %}
{{ ' ' }}
###############################################################################
# GENERATED CODE: for {{ _filter_name }}
[transforms.{{ _filter_name }}]
type = "filter"
inputs = ["metrics-http-accesslog-k8s_exclude_filter"]
condition = '''
        false {%- for selector_conf in metric_conf.event_selectors -%}
{{ ' ' }} || # selector_id: {{ namespace }}/{{ metric_name }}/selectors/{{loop.index0 }}
((  true {# оборачиваем выражения одного selector #}
            {%- for logfield_name, fconf in selector_conf.filter.items() %}
{# newline #}
{# Тут выполняем выбор оператора сравнения и констуируем выражение -#}
{# DEBUG: {{ logfield_name }}: {{ fconf }} -#}
                {%- if fconf.eq is defined and fconf.eq != "" %}
 && includes([to_string!(.{{ logfield_name }})], "{{ fconf.eq }}")
                {%- endif -%}
                {%- if fconf.neq is defined and fconf.neq != "" %}
 && !includes([to_string!(.{{ logfield_name }})], "{{ fconf.neq }}")
                {%- endif -%}
                {%- if fconf.re is defined %}
                    {%- if fconf.re != "" %}
 && match(to_string!(.{{ logfield_name }}), r'{{ fconf.re }}')
                    {%- else %}
[transforms.metrics-http-accesslog-k8s_routes] Build text: ERROR: invalid regexp '{{ fconf.re }}' for {{ namespace }}/{{ metric_name }}, selector: {{ selector_conf.selector }}, filter: re
                    {%- endif -%}
                {%- endif -%}
                {%- if fconf.nre is defined %}
                    {%- if fconf.nre != "" %}
 && !match(.{{ logfield_name }}, r'{{ fconf.nre }}')
                    {%- else %}
Build text: ERROR: invalid regexp '{{ fconf.nre }}' for {{ namespace }}/{{ metric_name }}, selector: {{ selector_conf.selector }}, filter: nre
                    {%- endif -%}
                {%- endif -%}
                {%- if fconf.oneOfRe is defined %}
 && match_any!(.{{ logfield_name }}, [
                    {%- for one_re in fconf.oneOfRe %}
r'{{ one_re }}',
                    {%- endfor %}
])
                {%- endif -%}
            {% endfor %}
{{ ' ' }} ))
        {%- endfor -%}
        {{ ' ' }}
    '''
{# newline #}
    {%- endfor %}
{%- endfor %}


###############################################################################
{%- for namespace, metric in metrics_catalog.metrics.items() -%}
    {%- for metric_name, metric_conf in metric.items() -%}
        {%- set _metric_full_name = namespace + "_" + metric_name -%}
        {%- set _input_name = _filter_name_prefix + _metric_full_name -%}
        {%- set _reducer_name = "metrics-http-accesslog-k8s_reducer_" + _metric_full_name %}
# GENERATED CODE: for {{ _metric_full_name }}
[transforms.{{ _reducer_name }}]
type = "remap"
inputs = [ "{{ _input_name }}" ]
source = '''
    ###
    ## Делаем замены значений в полях на константы для снижения кардинальности метрик. Например, заменяем .http_path = /product/perchatki на .http_path = /product/:name
    ##
    {% set _string_fields = dict() %}
    {# newline #}
    {%- for selector_conf in metric_conf.event_selectors -%}
        {% for logfield_name, fconf in selector_conf.filter.items() -%}
            {% if logfield_name not in _string_fields -%}
            {%- set _= _string_fields.update( {logfield_name: 1 }) -%}
.{{ logfield_name }} = to_string(.{{ logfield_name }}) ?? "error:not_a_string:{{ logfield_name }}" # требуется, чтобы не ругался replace
{# newline #}
            {%- endif -%}
{# newline #}
{#- Тут выполняем выбор оператора сравнения и констуируем выражение -#}
            {%- if fconf.re is defined %}
                {%- if fconf.re != "" %}
                    {%- if fconf.label_override is defined and fconf.label_override != "" %}
.{{ logfield_name }} = replace(.{{ logfield_name }}, r'{{ fconf.re }}', s'{{ fconf.label_override }}');
{# newline #}
                    {%- endif %}
                {%- else %}
[{{ _reducer_name }}] Build text: ERROR: invalid regexp '{{ fconf.re }}' for {{ namespace }}/{{ metric_name }}, selector: {{ selector_conf.selector }}, filter: re
                {%- endif %}
            {%- endif %}
        {%- endfor %}
    {%- endfor %}
'''
{{ ' ' }}
{# newline #}
    {%- endfor %}
{%- endfor %}


###
### GENERATED METRCS DEFINITIONS
###
###############################################################################
{% set metric_sources = [] %}
{%- for namespace, metric in metrics_catalog.metrics.items() -%}
    {%- for metric_name, metric_conf in metric.items() -%}
        {%- set _metric_full_name = namespace + "_" + metric_name %}
        {%- set _input_name = "metrics-http-accesslog-k8s_reducer_" + _metric_full_name -%}
        {%- set _transform_name = "metrics-http-accesslog-k8s-metric-" + _metric_full_name %}
        {{- metric_sources.append( _transform_name ) }}

[transforms.{{ _transform_name }}]
type = "log_to_metric"
inputs = [ "{{ _input_name }}" ]

  [[transforms.{{ _transform_name }}.metrics]]
    type = "{{ metric_conf.metric_type }}"
    field = "{{ metric_conf.group_by_logfield }}"
    name = "{{ metric_name }}"
{% if namespace != "" %}
    namespace = "{{ namespace }}"
{% endif %}

    [transforms.{{ _transform_name }}.metrics.tags]
      environment = "{{ vector_environment }}"
      {% for label, logfield in metric_conf.label_logfield_mapping.items() -%}
      {{ label }} = "{{ '{{' }}{{ logfield }}{{ '}}' }}"
      {% endfor %}

  {% endfor %}
{% endfor %}


[transforms.metrics-http-accesslog-k8s]
type = "filter"
inputs = [{{ metric_sources | map("to_json") | join(',')}}]
condition = '''true'''
